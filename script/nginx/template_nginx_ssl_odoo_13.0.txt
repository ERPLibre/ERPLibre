# TODO replace SERVER_NAME by your server_name, example test_mysite_com
# TODO replace DOMAIN by your hostname, example test.mysite.com
upstream erplibre_SERVER_NAME {
  server 127.0.0.1:8069;
}
upstream erplibre_SERVER_NAME_chat {
  server 127.0.0.1:8072;
}

server {

    server_name DOMAIN;

    # Add Headers for erplibre proxy mode
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Real-IP $remote_addr;
    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-XSS-Protection "1; mode=block";

    # erplibre request log files
    access_log /var/log/nginx/SERVER_NAME-access.log;
    error_log /var/log/nginx/SERVER_NAME-error.log;

    # Increase proxy buffer size
    proxy_buffers 16 64k;
    proxy_buffer_size 128k;

    proxy_read_timeout 720s;
    proxy_connect_timeout 720s;
    proxy_send_timeout 720s;

    # Force timeouts if the backend dies
    proxy_next_upstream error timeout invalid_header http_500 http_502
    http_503;

    types {
       text/less less;
       text/scss scss;
    }

    # Enable data compression
    gzip on;
    gzip_min_length 1100;
    gzip_buffers 4 32k;
    gzip_types text/css text/less text/plain text/xml application/xml application/json application/javascript application/pdf image/jpeg image/png;
    gzip_vary on;
    client_header_buffer_size 4k;
    large_client_header_buffers 4 64k;
    client_max_body_size 1024M;

    location / {
       proxy_pass http://erplibre_SERVER_NAME;
       # by default, do not forward anything
       proxy_redirect off;
    }

    location /longpolling {
       proxy_pass http://erplibre_SERVER_NAME_chat;
    }

    # cache some static data in memory for 60mins.
    location ~ /[a-zA-Z0-9_-]*/static/ {
        proxy_cache_valid 200 302 60m;
        proxy_cache_valid 404 1m;
        proxy_buffering on;
        expires 864000;
        proxy_pass http://erplibre_SERVER_NAME;
    }

    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/DOMAIN/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/DOMAIN/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

}

server {
    if ($host = DOMAIN) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    listen 80;

    server_name DOMAIN;
    return 404; # managed by Certbot

}
